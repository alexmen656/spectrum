<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<title>Paramecium Simulation with Environmental Effects</title>
<style>
  * { box-sizing: border-box; }
  body {
    margin: 0;
    font-family: Arial, sans-serif;
    background: #1e1e1e;
    color: #fff;
    display: flex;
    height: 100vh;
  }
  canvas {
    background: #ccf;
    border-right: 2px solid #333;
    flex: 1;
    cursor: crosshair;
    width: 800px;
    height: 600px;
    display: block;
  }
  #panel {
    width: 340px;
    padding: 20px;
    background: #2a2a2a;
    overflow-y: auto;
  }
  label { display: block; margin: 10px 0 4px; }
  input[type="range"] { width: 100%; }
  .value { float: right; }
  .divider { margin: 20px 0; border-top: 1px solid #444; }
  .info-box {
    background: #1e1e1e;
    padding: 12px;
    border-radius: 10px;
    font-size: 0.9em;
    color: #ddd;
  }
  .info-box td {
    padding: 6px;
    border-bottom: 1px solid #444;
  }
  .info-box td:first-child { font-weight: bold; }
  button {
    margin-top: 10px;
    width: 100%;
    padding: 10px;
    background: #444;
    color: white;
    border: none;
    border-radius: 6px;
    font-weight: bold;
    cursor: pointer;
  }
  button:hover { background: #666; }
  #dragFood {
    width: 20px;
    height: 20px;
    background: orange;
    border-radius: 50%;
    margin: 15px auto;
    cursor: grab;
  }
  #dragFood.dragging {
    opacity: 0.6;
    cursor: grabbing;
  }
</style>
</head>
<body>

<canvas id="dish" width="800" height="600"></canvas>

<div id="panel">
  <h2>Simulation Controls</h2>
  <div><strong>Time Elapsed:</strong> <span id="clock">0s</span></div>
  <div><strong>Population:</strong> <span id="population">0</span></div>
  <div><strong>Deaths:</strong> <span id="deaths">0</span></div>

  <label for="reproRate">Reproduction Rate: <span class="value" id="reproVal">0.01</span></label>
  <input type="range" id="reproRate" min="0.0001" max="0.05" step="0.0005" value="0.01">

  <label for="speedControl">Speed: <span class="value" id="speedVal">1.5</span></label>
  <input type="range" id="speedControl" min="0.5" max="5" step="0.1" value="1.5">

  <label for="tempControl">Temperature (°C): <span class="value" id="tempVal">22</span></label>
  <input type="range" id="tempControl" min="10" max="45" step="1" value="22">

  <button id="toggleSim">Stop Simulation</button>
  <button onclick="resetSimulation()">Reset Simulation</button>
  <button onclick="downloadReport()">Download Report</button>

  <div class="divider"></div>

  <div style="text-align:center;">
    <div id="dragFood" draggable="true" title="Drag me to the dish to add food"></div>
    <small>Drag this food pellet onto the dish</small>
  </div>

  <div class="divider"></div>

  <div class="info-box">
    <strong>Simulation Info</strong>
    <table>
      <tr><td>Repro Timer</td><td>&gt; 400</td></tr>
      <tr><td>Overfeeding</td><td>&gt; 3 times in 500 frames</td></tr>
      <tr><td>Heat Death</td><td>&gt; 40°C</td></tr>
    </table>
  </div>
</div>

<script>
let canvas = document.getElementById("dish");
let ctx = canvas.getContext("2d");

let paramecia = [], foodParticles = [], simTime = 0;
let reproductionChance = 0.01, globalSpeed = 1.5, temperature = 22;
let deathCount = 0;

let clockDisplay = document.getElementById("clock");
let populationDisplay = document.getElementById("population");
let deathsDisplay = document.getElementById("deaths");
let reproInput = document.getElementById("reproRate");
let reproVal = document.getElementById("reproVal");
let speedInput = document.getElementById("speedControl");
let speedVal = document.getElementById("speedVal");
let tempInput = document.getElementById("tempControl");
let tempVal = document.getElementById("tempVal");

let running = true;
let animationFrameId;

class Paramecium {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.angle = Math.random() * 2 * Math.PI;
    this.speed = globalSpeed * (1 + Math.random() * 0.3);
    this.reproduceTimer = 0;
    this.alive = true;
    this.fade = 1;
    this.deathColor = null;
    this.eatHistory = [];
  }

  update() {
    if (!this.alive) {
      this.fade -= 0.02;
      if (this.fade <= 0) {
        this.fade = 0;
      }
      return;
    }

    if (temperature > 40 || this.reproduceTimer > 2000) {
      this.kill("red");
      return;
    }

    const now = simTime * 1000;
    this.eatHistory = this.eatHistory.filter(t => now - t < 5000);

    if (this.eatHistory.length > 3) {
      this.kill("purple");
      return;
    }

    const target = this.findNearestFood();
    if (target) {
      let dx = target.x - this.x, dy = target.y - this.y;
      this.angle = Math.atan2(dy, dx);
      if (Math.hypot(dx, dy) < 6) {
        target.eaten = true;
        this.reproduceTimer += 200;
        this.eatHistory.push(now);
      }
    } else {
      this.angle += (Math.random() - 0.5) * 0.05;
    }

    this.x += Math.cos(this.angle) * this.speed;
    this.y += Math.sin(this.angle) * this.speed;

    if (this.x < 10 || this.x > canvas.width - 10) this.angle = Math.PI - this.angle;
    if (this.y < 10 || this.y > canvas.height - 10) this.angle = -this.angle;

    this.reproduceTimer++;
  }

  draw() {
    ctx.save();
    ctx.translate(this.x, this.y);
    ctx.rotate(this.angle);
    ctx.globalAlpha = this.fade;

    ctx.beginPath();
    ctx.ellipse(0, 0, 10, 5, 0, 0, Math.PI * 2);
    ctx.fillStyle = this.alive ? "rgba(255,255,255,0.6)" : this.deathColor;
    ctx.fill();
    ctx.stroke();

    if (this.alive) {
      ctx.beginPath();
      ctx.arc(2, 0, 2, 0, Math.PI * 2);
      ctx.fillStyle = "rgba(100,100,255,0.8)";
      ctx.fill();
    }

    ctx.restore();
    ctx.globalAlpha = 1;
  }

  shouldReproduce() {
    return this.alive && this.reproduceTimer > 400 && Math.random() < reproductionChance;
  }

  reproduce() {
    this.reproduceTimer = 0;
    return new Paramecium(this.x + Math.random() * 5, this.y + Math.random() * 5);
  }

  findNearestFood() {
    return foodParticles.filter(f => !f.eaten).sort((a,b) => {
      return ((a.x - this.x)**2 + (a.y - this.y)**2) - ((b.x - this.x)**2 + (b.y - this.y)**2);
    })[0];
  }

  kill(color) {
    this.alive = false;
    this.deathColor = color;
    deathCount++;
  }
}

class Food {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.eaten = false;
  }
  draw() {
    if (!this.eaten) {
      ctx.beginPath();
      ctx.arc(this.x, this.y, 3, 0, Math.PI * 2);
      ctx.fillStyle = "orange";
      ctx.fill();
    }
  }
}

function initialize() {
  paramecia = [];
  foodParticles = [];
  simTime = 0;
  deathCount = 0;
  for (let i = 0; i < 15; i++) {
    paramecia.push(new Paramecium(Math.random() * canvas.width, Math.random() * canvas.height));
  }
}

function animate() {
  if (!running) return;
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  const newOnes = [];

  paramecia.forEach(p => {
    p.update();
    p.draw();
    if (p.shouldReproduce()) newOnes.push(p.reproduce());
  });

  paramecia = paramecia.filter(p => p.fade > 0);
  paramecia = paramecia.concat(newOnes);
  foodParticles = foodParticles.filter(f => !f.eaten);

  foodParticles.forEach(f => f.draw());
  simTime += 0.05 * globalSpeed;
  updateUI();
  animationFrameId = requestAnimationFrame(animate);
}

function updateUI() {
  populationDisplay.textContent = paramecia.filter(p => p.alive).length;
  deathsDisplay.textContent = deathCount;
  clockDisplay.textContent = `${Math.floor(simTime)}s`;
  reproVal.textContent = reproductionChance.toFixed(4);
  speedVal.textContent = globalSpeed.toFixed(1);
  tempVal.textContent = temperature;
}

reproInput.addEventListener("input", () => {
  reproductionChance = parseFloat(reproInput.value);
});
speedInput.addEventListener("input", () => {
  globalSpeed = parseFloat(speedInput.value);
});
tempInput.addEventListener("input", () => {
  temperature = parseInt(tempInput.value);
});

function resetSimulation() {
  initialize();
  if (!running) {
    running = true;
    toggleSimBtn.textContent = "Stop Simulation";
    animate();
  }
}

const dragFood = document.getElementById("dragFood");
let dragging = false;

dragFood.addEventListener("dragstart", e => {
  dragging = true;
  dragFood.classList.add("dragging");
  e.dataTransfer.setDragImage(new Image(), 0, 0);
});
dragFood.addEventListener("dragend", () => {
  dragging = false;
  dragFood.classList.remove("dragging");
});
canvas.addEventListener("dragover", e => e.preventDefault());
canvas.addEventListener("drop", e => {
  e.preventDefault();
  if (dragging) {
    const rect = canvas.getBoundingClientRect();
    const x = (e.clientX - rect.left) * (canvas.width / rect.width);
    const y = (e.clientY - rect.top) * (canvas.height / rect.height);
    foodParticles.push(new Food(x, y));
    dragging = false;
    dragFood.classList.remove("dragging");
  }
});

const toggleSimBtn = document.getElementById("toggleSim");
toggleSimBtn.addEventListener("click", () => {
  running = !running;
  toggleSimBtn.textContent = running ? "Stop Simulation" : "Start Simulation";
  if (running) animate(); else cancelAnimationFrame(animationFrameId);
});

function downloadReport() {
  const realReproTimeSec = 180;
  const simReproPeriodSec = 400 * (0.05 / globalSpeed);
  const scaleFactor = realReproTimeSec / simReproPeriodSec;
  const estimatedRealSeconds = simTime * scaleFactor;
  const estimatedRealHours = (estimatedRealSeconds / 3600).toFixed(2);

  const dataURL = canvas.toDataURL("image/png");
  const html = `
    <html><head><title>Simulation Report</title></head>
    <body style="font-family:sans-serif;margin:20px;">
      <h1>Paramecium Simulation Report</h1>
      <p><strong>Simulated Time:</strong> ${Math.floor(simTime)} seconds</p>
      <p><strong>Estimated Real-Life Equivalent:</strong> ~${estimatedRealHours} hours</p>
      <p><strong>Final Population:</strong> ${paramecia.filter(p => p.alive).length}</p>
      <p><strong>Total Deaths:</strong> ${deathCount}</p>
      <p><strong>Reproduction Chance:</strong> ${reproductionChance.toFixed(4)}</p>
      <p><strong>Speed:</strong> ${globalSpeed.toFixed(2)}</p>
      <p><strong>Temperature:</strong> ${temperature}°C</p>
      <hr />
      <img src="${dataURL}" style="max-width:100%;border:1px solid #ccc;" />
    </body></html>
  `;
  const blob = new Blob([html], { type: "text/html" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = "simulation_report.html";
  a.click();
  URL.revokeObjectURL(url);
}

initialize();
animate();
</script>
</body>
</html>
